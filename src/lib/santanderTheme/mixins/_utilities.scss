////
/// Cabecera del fichero utilities.
/// @group Santander
////

/// Mixin to prefix several properties at once
/// @author HBS Santander
/// @param {Map} $declarations - Declarations to prefix
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefix($declarations, $prefixes: ()) {

  @each $property,
  $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard
    #{$property}: $value;
  }
}
// Global Prefixes
$css_prefixes: webkit moz ms o;



@mixin map-has-key-then-write-modifier($propertie_name, $searched_map, $modifier) {
  @if map-has-key($searched_map, $modifier) {
    #{$propertie_name}: map-get($searched_map, $modifier)!important;
  }
}


/// Triangle - genera un triangulo estandarizado
/// @access public
/// @param {String} $direction [up] - posicion en la que se desea mostrar. Valores: up, up-right, right, down-right, down, down-left, left, up-left
/// @param {String} $width [10] - ancho del triangulo
/// @param {String} $height [10] - altura del triangulo
/// @param {String} $color [san_red] - color del triangulo
/// @require {function} _isColor
/// @example
/// triangle("down", 20px, 20px, "san_blue");
@mixin triangle(
  $direction: up,
  $width: 10,
  $height: 10,
  $color: san_red
) {
  @if not index(
    "up" "up-right" "right" "down-right" "down" "down-left" "left" "up-left",
    $direction
  ) {
    @error "Direction must be `up`, `up-right`, `right`, `down-right`, " +
           "`down`, `down-left`, `left` or `up-left`.";
  } @else if not _isColor($color) {
    @error "`#{$color}` is not a valid color for the `$color` argument in " +
           "the `triangle` mixin.";
  } @else {
    border-style: solid;
    height: 0;
    width: 0;
    content: " ";
    $color: getColor($color);

    @if $direction == "up" {
      border-color: transparent transparent $color;
      border-width: 0 ($width / 2) $height;
    } @else if $direction == "up-right" {
      border-color: transparent $color transparent transparent;
      border-width: 0 $width $width 0;
    } @else if $direction == "right" {
      border-color: transparent transparent transparent $color;
      border-width: ($height / 2) 0 ($height / 2) $width;
    } @else if $direction == "down-right" {
      border-color: transparent transparent $color;
      border-width: 0 0 $width $width;
    } @else if $direction == "down" {
      border-color: $color transparent transparent;
      border-width: $height ($width / 2) 0;
    } @else if $direction == "down-left" {
      border-color: transparent transparent transparent $color;
      border-width: $width 0 0 $width;
    } @else if $direction == "left" {
      border-color: transparent $color transparent transparent;
      border-width: ($height / 2) $width ($height / 2) 0;
    } @else if $direction == "up-left" {
      border-color: $color transparent transparent;
      border-width: $width $width 0 0;
    }
  }
}

/// Truncate - permite truncar contenido
/// @access public
/// @param {String} $overflow [ellipsis] - comportamiento al truncar el texto (text-overflow property).
/// @example
/// truncate(clip);
@mixin truncate($overflow: ellipsis) {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: $overflow;
}

/// Pseudo - permite mostrar contenido para ::before y ::after
/// @access public
/// @param {String} $display [block] - propiedad display.
/// @param {String} $pos [absolute] - propiedad position.
/// @param {String} $content [''] - propiedad content.
/// @example
/// pseudo();
@mixin pseudo($display: block, $pos: absolute, $content: ''){
  content: $content;
  display: $display;
  position: $pos;
}
