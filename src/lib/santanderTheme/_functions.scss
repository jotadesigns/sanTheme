////
/// Cabecera del fichero separador.
/// @group Santander
////

///////////// HBS functions

/// Reemplaza `$search` por `$replace` en `$string`
/// @access public
/// @param {String} $string - cadena inicial
/// @param {String} $search - substring a reemplazar
/// @param {String} $replace [""] - nuevo valor
/// @example
/// str-replace("hola mundo", "mundo", "a todos")
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

/// Permite escapar unicode
/// @access public
/// @param {String} $str - caracteres unicodes a escapar
/// @example
/// str-replace("e904")
@function unicode($str){
  @return unquote("\"")+unquote(str-insert($str, "\\", 1))+unquote("\"");
}

@function _isColor($key) {
  @return map-has-key($colors, $key);
}

/// Permite seleccionar colores HBS Standar
/// @access public
/// @param {String} $key [san_red] - nombre del color a recuperar. Valores: `$colors` y `$greys`
/// @param {String} $variant [normal] - variante del color a recuperar. Valores: `$color_variants`
/// @require $color_variants
/// @require $colors
/// @example
/// color("san_green")
@function getColor($key: "san_red", $variant: "normal") {
  @if map-has-key($color_variants, $variant) {
    $variant_val: map-get($color_variants, $variant);
    @return  rgba(map-get($colors, $key), $variant_val);
  }
  @else {
    @return  rgba(map-get($colors, $key), 1);
  }
}



// @function theme-color($key: "success") {
//   @return map-get($theme-colors, $key);
// }

// @function gray($key: "light") {
//   @return map-get($grays, $key);
// }

/// Devuelve un espaciado HBS Standar
/// @access public
/// @param {String} $key [regular] - tamaño del espaciado. Valores: `$spacers`
/// @require $spacers
/// @example
/// getSpace("large")
@function getSpace($key: "regular") {
  @return map-get($spacers, $key);
}

/// Permite seleccionar font-size HBS Standar
/// @access public
/// @param {String} $key [regular] - tamaño a recuperar. Valores: `$font-sizes`
/// @require $font-sizes
/// @example
/// getFontSize("small")
@function getFontSize($key: "regular") {
  @return map-get($font-sizes, $key);
}

/// Permite posicionar en la coordenada z los distintos elementos en pantalla
/// @access public
/// @param {String} $name [text] - elemento a recuperar su layer. Valores: `$layers`
/// @require $layers
/// @example
/// layer("modal")
@function layer($name: "text") {
  @if map-has-key($layers, $name) {
    @return map-get($layers, $name);
  }

  @warn "No existe la key #{$name} en el mapa de layers ’$layers’";
  @return null;
};



/************************************************ MAP HELPER FUNCTIONS ************************************************/

/// Función para saber si una variable es un mapa
/// @access public
/// @param {*} $var - Posible mapa
/// @return {Boolean} - True cuando sea un mapa, en caso contrario false
/// @example
/// is-map($map);
@function is-map($var){
  @return type-of($var) == 'map';
}

/// Función que wrapea la variable para convertirla en un objeto Map en el caso de que no lo sea
/// @access public
/// @param {*} $var - Variable a convertir
/// @return {Map} - Variable wrapeada a tipo Map
/// @example
/// castToMap($string);
@function castToMap($var){
  @if is-map($var) {
    $aux: $var;
  }
  @else{
    $aux: ($var);
  }
  @return $aux;
}

/// Función para obtener valores en un mapa complejo (nested map)
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
/// @example
/// map-deep-get($o-grid-default-config, "layouts", "M");
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    @if type-of($map) != "map" {
      @warn '`#{$map}` is not a map.';
      @return false;
    }
    $map: map-get($map, $key);
  }

  @return $map;
}

/// Función para setear un valor en un mapa complejo (nested map)
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
/// @example
/// map-deep-set($o-grid-default-config, "layouts" "M", 650px);
@function map-deep-set($map, $keys, $value) {
  $maps: ($map, );
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if is-map(nth($keys, -1)) {
    @warn "La última key especificada no es un valor, es un mapa. Será sustituido por `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "La key `#{$key}` no existe en el nivel indicado del mapa.";
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}

/********************************************** END MAP HELPER FUNCTIONS **********************************************/


/************************************************ ASSET HELPER FUNCTIONS ************************************************/

/// Asset URL builder
/// @access private
/// @param {String} $type - Tipo de asset (carpeta deseada de asset)
/// @param {String} $file - Nombre del fichero asset, incluyendo extension del fichero
/// @return {URL} - Una función 'url()' que apunta al recurso de assets solicitado
/// @require $asset-base-path
/// @example
/// asset('images', 'loading.gif')
@function asset($type, $file) {
  @return url($asset-base-path + '/' + $type + '/' + $file);
}

/// Image asset helper
/// @access public
/// @param {String} $file - Nombre de la imagen, incluyendo extension del fichero
/// @return {URL} - Una función 'url()' que apunta a la imagen de assets solicitada
/// @require {function} asset
/// @example
/// image('loading.gif')
@function image($file) {
  @return asset('images', $file);
}

/// Font asset helper
/// @access public
/// @param {String} $file - Nombre de la fuente, incluyendo extension del fichero
/// @return {URL} - Una función 'url()' que apunta a la fuente de assets solicitada
/// @require {function} asset
/// @example
/// font('icons/ico3.ttf')
@function font($file) {
  @return asset('css/fonts', $file);
}

/********************************************** END ASSET HELPER FUNCTIONS **********************************************/
